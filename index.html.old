<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Exposure Match</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');

    body {
      font-family: "Inter", Arial, sans-serif;
      margin: 0;
      padding: 1rem;
      line-height: 1.6;
      font-size: 16px;
      background-color: #f7f7f7;
      color: #333;
    }

    h1 {
      font-size: 24px;
      margin-bottom: 1.5rem;
      color: #222;
    }

    label {
      display: block;
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: #444;
    }

    input[type="number"] {
      width: 100%;
      max-width: 300px;
      padding: 0.75rem;
      margin-bottom: 1rem;
      border: 1px solid #ccc;
      border-radius: 8px;
      font-size: 16px;
      box-sizing: border-box;
    }

    .slider-container {
      width: 100%;
      max-width: 400px;
      margin: 1.5rem 0;
    }

    .slider {
      width: 100%;
    }

    #stopAmount, #ndOrGain {
      font-size: 16px;
      margin: 0.5rem 0;
      color: #444;
    }

    p {
      margin: 1rem 0;
      font-size: 16px;
      color: #444;
    }

    #baseShutterSpeed, #calculatedShutterSpeed, #closestShutterSpeed {
      font-weight: 500;
      color: #000;
    }

    /* Responsive adjustments */
    @media (max-width: 600px) {
      body {
        padding: 0.5rem;
      }

      h1 {
        font-size: 22px;
      }

      input[type="number"] {
        font-size: 14px;
        padding: 0.5rem;
      }

      p {
        font-size: 14px;
      }

      #stopAmount, #ndOrGain {
        font-size: 14px;
      }
    }
  </style>
</head>
<body>
  <h1>Exposure Match</h1>
  <label for="fps">Frames Per Second (FPS):</label>
  <input type="number" id="fps" placeholder="e.g., 24" min="1" step="1">
  <br>
  <label for="shutterAngle">Shutter Angle (degrees):</label>
  <input type="number" id="shutterAngle" placeholder="e.g., 180" min="1" max="360" step="0.1">
  <br><br>
  <div id="stopAmount">Stops: 0 (0 whole stops, 0 third stops)</div>
  <div id="ndOrGain"></div>
  <div class="slider-container">
    <input type="range" id="stopSlider" class="slider" min="-21" max="21" value="0" step="1">
  </div>

  <p>Closest Shutter Speed: <span id="closestShutterSpeed"></span></p>
  <br>
  <p>Base Shutter Speed: <span id="baseShutterSpeed"></span></p>
  <p>Calculated Shutter Speed: <span id="calculatedShutterSpeed"></span></p>

  <script>
    const shutterSpeeds = [
      1/8000, 1/6400, 1/5000, 1/4000, 1/3200, 1/2500, 1/2000,
      1/1600, 1/1250, 1/1000, 1/800, 1/640, 1/500, 1/400,
      1/320, 1/250, 1/200, 1/160, 1/125, 1/100, 1/80, 1/60,
      1/50, 1/40, 1/30, 1/25, 1/20, 1/15, 1/13, 1/10, 1/8,
      1/6, 1/5, 1/4, 1/3, 1/2.5, 1/2, 1/1.6, 1/1.3, 1, 1.3,
      1.6, 2, 2.5, 3, 4, 5, 6, 8, 10, 13, 15, 20, 25, 30
    ];

    const stopSlider = document.getElementById('stopSlider');
    const stopAmount = document.getElementById('stopAmount');
    const ndOrGain = document.getElementById('ndOrGain');
    const baseShutterSpeed = document.getElementById('baseShutterSpeed');
    const calculatedShutterSpeed = document.getElementById('calculatedShutterSpeed');
    const closestShutterSpeed = document.getElementById('closestShutterSpeed');
    const fpsInput = document.getElementById('fps');
    const shutterAngleInput = document.getElementById('shutterAngle');

    // Initialize with default values
    fpsInput.value = 24;
    shutterAngleInput.value = 172.8;

    function calculateShutterSpeed(fps, shutterAngle) {
      return shutterAngle / (360 * fps);
    }

    function adjustShutterSpeed(baseSpeed, stops) {
      return baseSpeed * Math.pow(2, stops / 3);
    }

    function findClosestShutterSpeed(speed, shutterSpeeds) {
      let closest = shutterSpeeds[0];
      let minDiff = Math.abs(speed - closest);

      for (let s of shutterSpeeds) {
        const diff = Math.abs(speed - s);
        if (diff < minDiff) {
          minDiff = diff;
          closest = s;
        }
      }

      return closest;
    }

    function calculateNDFilter(stops) {
      const ndValue = Math.abs(stops) * 0.3;
      return ndValue.toFixed(1);
    }

    function formatShutterSpeed(speed) {
      if (speed < 1) {
        return `1/${Math.round(1 / speed)}`;
      } else {
        return speed.toFixed(3);
      }
    }

    function updateShutterSpeed() {
      const fps = parseFloat(fpsInput.value);
      const shutterAngle = parseFloat(shutterAngleInput.value);

      if (isNaN(fps) || isNaN(shutterAngle) || fps <= 0 || shutterAngle <= 0) {
        baseShutterSpeed.textContent = "Invalid input: FPS and Shutter Angle must be positive numbers.";
        calculatedShutterSpeed.textContent = "";
        closestShutterSpeed.textContent = "";
        ndOrGain.textContent = "";
        return;
      }

      // Calculate base shutter speed
      const baseSpeed = calculateShutterSpeed(fps, shutterAngle);
      baseShutterSpeed.textContent = formatShutterSpeed(baseSpeed);

      // Adjust shutter speed based on stops
      const stops = parseInt(stopSlider.value);
      const newSpeed = adjustShutterSpeed(baseSpeed, stops);

      // Display the calculated shutter speed
      calculatedShutterSpeed.textContent = formatShutterSpeed(newSpeed);

      // Find the closest shutter speed for display
      const closestSpeed = findClosestShutterSpeed(newSpeed, shutterSpeeds);
      closestShutterSpeed.textContent = formatShutterSpeed(closestSpeed);

      // Calculate whole and third stops
      const totalStops = stops / 3;
      const wholeStops = Math.floor(totalStops);
      const thirdStops = Math.round((totalStops - wholeStops) * 3);

      // Update the stop amount display
      stopAmount.textContent = `Stops: ${totalStops.toFixed(2)} (${wholeStops} whole stops, ${thirdStops} third stops)`;

      // Update ND or Gain display
      if (totalStops < 0) {
        const ndValue = calculateNDFilter(totalStops);
        ndOrGain.textContent = `ND Filter: ND ${ndValue}`;
      } else if (totalStops > 0) {
        ndOrGain.textContent = `Gain: +${totalStops.toFixed(2)} stops`;
      } else {
        ndOrGain.textContent = "No ND filter or gain needed";
      }
    }

    // Event listeners
    stopSlider.addEventListener('input', updateShutterSpeed);
    stopSlider.addEventListener('change', updateShutterSpeed); // Snap on release
    fpsInput.addEventListener('input', updateShutterSpeed);
    shutterAngleInput.addEventListener('input', updateShutterSpeed);

    // Initialize with default values
    updateShutterSpeed();
  </script>
</body>
</html>